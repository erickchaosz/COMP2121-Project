.include "m2560def.inc"

.def input_increment = r20;
.def sec_counter = r17;
.def temp = r18;
.def stack_count = r19;

.equ LCD_RS = 7
.equ LCD_E = 6
.equ LCD_RW = 5
.equ LCD_BE = 4

.macro lcd_set
	sbi PORTA, @0
.endmacro
.macro lcd_clr
	cbi PORTA, @0
.endmacro


.macro do_lcd_command

	ldi r16, @0
	rcall lcd_command
	rcall lcd_wait

.endmacro

.macro do_lcd_data

	mov r16, @0	;ldi
	rcall lcd_data
	rcall lcd_wait

.endmacro


		jmp RESET
.org	INT2addr
		jmp EXT_INT2


RESET:
	clr sec_counter;
	clr input_increment;
	clr temp;

	ldi temp,(2 << ISC10)
	sts EICRA, temp

	in temp, EIMSK
	ori temp, (1<<INT2)
	out EIMSK, temp

	sei

	ldi r16, low(RAMEND)
	out SPL, r16
	ldi r16, high(RAMEND)
	out SPH, r16

	ser r16
	out DDRF, r16
	out DDRA, r16
	clr r16
	out PORTF, r16
	out PORTA, r16

	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_5ms
	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_1ms
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00001000 ; display off?
	do_lcd_command 0b00000001 ; clear display
	do_lcd_command 0b00000110 ; increment, no display shift
	do_lcd_command 0b00001110 ; Cursor on, bar, no blink

	;	do_lcd_data 'H'
	;do_lcd_data 'e'
	;do_lcd_data 'l'
;	do_lcd_data 'l'
	;do_lcd_data 'o'
		
	clr temp
	jmp main

main:

	cpi temp, 50 ; temp is 5 millisecond function counter
	breq call_lcd
	inc temp
	rcall sleep_5ms
	rjmp main
	;counter decrementing from 50 to 0 ; calls lcd function, clears registers

call_lcd:
	;do_lcd_data temp ;;
	clr temp
	rcall CALC_DIV
	
	rjmp main

	
;
; Send a command to the LCD (r16)
;

lcd_command:
	out PORTF, r16
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	lcd_clr LCD_E
	rcall sleep_1ms
	ret

lcd_data:
	out PORTF, r16
	lcd_set LCD_RS
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	lcd_clr LCD_E
	rcall sleep_1ms
	lcd_clr LCD_RS
	ret

lcd_wait:
	push r16
	clr r16
	out DDRF, r16
	out PORTF, r16
	lcd_set LCD_RW
lcd_wait_loop:
	rcall sleep_1ms
	lcd_set LCD_E
	rcall sleep_1ms
	in r16, PINF
	lcd_clr LCD_E
	sbrc r16, 7
	rjmp lcd_wait_loop
	lcd_clr LCD_RW
	ser r16
	out DDRF, r16
	pop r16
	ret

.equ F_CPU = 16000000
.equ DELAY_1MS = F_CPU / 4 / 1000 - 4
; 4 cycles per iteration - setup/call-return overhead

sleep_1ms:
	push r24
	push r25
	ldi r25, high(DELAY_1MS)
	ldi r24, low(DELAY_1MS)

delayloop_1ms:
	sbiw r25:r24, 1
	brne delayloop_1ms
	pop r25
	pop r24
	ret

sleep_5ms:
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	rcall sleep_1ms
	ret



EXT_INT2:	;called 4 times a rotation on the motor
	inc input_increment;

CALC_DIV: 	;called by main loop

	;do_lcd_data r20
	rcall DIV10
	mov input_increment, r21 
	;do_lcd_data r20
	
	push r21 ;r20
	cpi r20, 0
	breq SHOW_LCD
	inc stack_count
	rjmp CALC_DIV
	 			;push stack_count
	 ;cpi r22, 0
	 ;breq SHOW_LCD
	 ;push r22
	 ;inc stack_count
	 ;rcall DIV10
	 ;mov r20, r21	;r20, r21
	 ;do_lcd_data r20 ;;
	 ;jmp CALC_DIV

SHOW_LCD:
	pop r20 ;r22
	dec stack_count
	cpi stack_count, 0
	breq END_LCD
	subi r20, -'1'
	ldi r20, 'A'
	do_lcd_data r20 ;r22
	jmp SHOW_LCD

END_LCD:

	clr input_increment
	clr sec_counter
	;pop stack_count
	clr stack_count
	clr temp
	
	ret

DIV10:
		;do_lcd_data r20
        push r30
        push r31
        in r30, SPL
        in r31, SPH
        push r16
        push r17                ;currnumber
        push r18                ;counter
        clr r18
        ldi r16, 10
        mov r17, input_increment ;numdiv

divloop:
        inc r18
        sub r17, r16
        cpi r17, 10
        brlt enddiv
		;inc r18

		jmp divloop ;forgot this?

enddiv:
        mov r21, r18 	; r0 really? i think its the other....
        mov r22, r17	; r1...way around
        pop r18
        pop r17
        pop r16
        out SPL, r31
        out SPH, r30
        pop r31
        pop r30
        ret





	
	


	
